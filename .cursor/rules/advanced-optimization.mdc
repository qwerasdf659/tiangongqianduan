---
description: 
globs: 
alwaysApply: true
---
# 🚀 高级优化规则集 - 效率提升与性能优化

## 🎯 核心目标：提升开发效率，减少请求浪费，优化工具使用

### 1. 效率监控与统计系统

```javascript
// 🔴 效率监控系统（基于1.mdc的并行调用规则扩展）
class EfficiencyMonitor {
    static metrics = {
        parallelCallsUsed: 0,
        serialCallsUsed: 0,
        requestsSaved: 0,
        timeSaved: 0,
        timeoutViolations: 0,
        duplicateIssues: 0,
        batchOperations: 0
    }
    
    // 🔴 引用1.mdc的并行调用实现（避免重复）
    static recordParallelCall(callCount) {
        // 详细并行调用逻辑见：1.mdc - ParallelCallEnforcer
        console.log(`📈 并行调用统计: ${callCount}个调用`)
        console.log(`📊 详细并行规则参见：1.mdc - ParallelCallEnforcer`)
        
        // 简化统计
        this.metrics.parallelCallsUsed += callCount
        this.metrics.requestsSaved += (callCount - 1) * 0.7
        this.metrics.timeSaved += (callCount - 1) * 2000
    }
    
    static recordSerialCall() {
        this.metrics.serialCallsUsed++
        console.warn(`⚠️ 串行调用检测 - 建议使用并行优化（详见1.mdc）`)
    }
    
    static recordTimeoutViolation() {
        this.metrics.timeoutViolations++
        console.error(`🚨 120秒超时违规 - 详细处理规则见powershell-syntax-enforcer.mdc`)
    }
    
    static recordDuplicateIssue(issueType) {
        this.metrics.duplicateIssues++
        console.warn(`🔄 重复问题记录: ${issueType}`)
    }
    
    static recordBatchOperation(operationCount) {
        this.metrics.batchOperations++
        this.metrics.requestsSaved += operationCount * 0.5
        this.metrics.timeSaved += operationCount * 1000
        
        console.log(`🔄 批处理记录: ${operationCount}个操作`)
    }
    
    static generateEfficiencyReport() {
        const parallelEfficiency = this.metrics.parallelCallsUsed / 
            (this.metrics.parallelCallsUsed + this.metrics.serialCallsUsed) * 100
        
        const report = {
            parallelEfficiency: Math.round(parallelEfficiency),
            requestsSaved: this.metrics.requestsSaved,
            timeSaved: Math.round(this.metrics.timeSaved / 1000),
            timeoutViolations: this.metrics.timeoutViolations,
            duplicateIssues: this.metrics.duplicateIssues,
            batchOperations: this.metrics.batchOperations,
            overallScore: this.calculateOverallScore()
        }
        
        console.log(`📊 效率报告:`)
        console.log(`  并行效率: ${report.parallelEfficiency}%`)
        console.log(`  节省请求: ${report.requestsSaved}次`)
        console.log(`  节省时间: ${report.timeSaved}秒`)
        console.log(`  超时违规: ${report.timeoutViolations}次`)
        console.log(`  重复问题: ${report.duplicateIssues}次`)
        console.log(`  批处理: ${report.batchOperations}次`)
        console.log(`  总体评分: ${report.overallScore}/100`)
        
        return report
    }
    
    static calculateOverallScore() {
        const parallelScore = Math.min(this.metrics.parallelCallsUsed * 10, 50)
        const timeoutPenalty = this.metrics.timeoutViolations * 10
        const duplicatePenalty = this.metrics.duplicateIssues * 5
        const batchBonus = this.metrics.batchOperations * 5
        
        return Math.max(0, Math.min(100, parallelScore - timeoutPenalty - duplicatePenalty + batchBonus))
    }
}
```

### 2. 配置文件统一管理（扩展1.mdc的域名检查器）

```javascript
// 🔴 配置文件统一管理系统（基于1.mdc的DomainConfigChecker扩展）
class ConfigurationManager {
    // 🔴 引用1.mdc的域名配置检查器（避免重复）
    static async validateAllConfigurations() {
        console.log('🔍 域名配置检查详见：1.mdc - DomainConfigChecker')
        
        // 扩展配置同步功能
        return await this.extendedConfigSync()
    }
    
    static async extendedConfigSync() {
        const configFiles = {
            'env': 'config/env.js',
            'project': 'project.private.config.json',
            'frontend': '前端技术规范文档标准.md',
            'backend': '后端技术规范文档标准.md',
            'interface': '接口对接规范文档标准.md'
        }
        
        const configValues = {
            'domain': 'rqchrlqndora.sealosbja.site',
            'protocol': 'https',
            'wsProtocol': 'wss'
        }
        
        console.log('🔄 开始扩展配置同步...')
        
        const results = []
        
        // 🔴 并行读取所有配置文件（引用1.mdc的并行调用原则）
        const readPromises = Object.entries(configFiles).map(async ([key, filepath]) => {
            try {
                const content = await read_file(filepath, true, 1, -1)
                return { key, filepath, content: content.content, success: true }
            } catch (error) {
                return { key, filepath, error: error.message, success: false }
            }
        })
        
        const configContents = await Promise.all(readPromises)
        
        // 检查配置一致性（引用1.mdc的批量检查原则）
        const inconsistencies = []
        configContents.forEach(config => {
            if (config.success) {
                const configInconsistencies = this.checkConfigConsistency(config, configValues)
                inconsistencies.push(...configInconsistencies)
            }
        })
        
        if (inconsistencies.length > 0) {
            console.error(`🚨 发现${inconsistencies.length}个配置不一致`)
            return this.generateSyncPlan(inconsistencies)
        }
        
        console.log('✅ 扩展配置同步检查完成，无需修复')
        return { needsSync: false }
    }
}
```

### 3. 智能搜索策略优化

```javascript
// 🔴 智能搜索策略优化系统
class SearchStrategyOptimizer {
    static searchHistory = []
    static searchPatterns = {
        SEMANTIC: { tool: 'codebase_search', efficiency: 85 },
        EXACT: { tool: 'grep_search', efficiency: 90 },
        HYBRID: { tools: ['codebase_search', 'grep_search'], efficiency: 95 }
    }
    
    static optimizeSearchQuery(query, context) {
        const semanticKeywords = ['how', 'where', 'what', 'when', 'why', 'which']
        const exactKeywords = ['function', 'class', 'const', 'let', 'var', 'import', 'export']
        
        const isSemanticQuery = semanticKeywords.some(keyword => 
            query.toLowerCase().includes(keyword)
        )
        
        const isExactQuery = exactKeywords.some(keyword => 
            query.includes(keyword)
        )
        
        let strategy
        if (isSemanticQuery && !isExactQuery) {
            strategy = 'SEMANTIC'
        } else if (isExactQuery && !isSemanticQuery) {
            strategy = 'EXACT'
        } else {
            strategy = 'HYBRID'
        }
        
        const optimizedQuery = {
            strategy,
            originalQuery: query,
            optimizedQuery: this.optimizeQuery(query, strategy),
            tool: this.searchPatterns[strategy].tool,
            tools: this.searchPatterns[strategy].tools,
            expectedEfficiency: this.searchPatterns[strategy].efficiency
        }
        
        this.recordSearchAttempt(optimizedQuery)
        return optimizedQuery
    }
    
    static optimizeQuery(query, strategy) {
        switch (strategy) {
            case 'SEMANTIC':
                if (!query.includes('?')) {
                    return `How does ${query} work?`
                }
                return query
                
            case 'EXACT':
                return query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
                
            case 'HYBRID':
                return {
                    semantic: this.optimizeQuery(query, 'SEMANTIC'),
                    exact: this.optimizeQuery(query, 'EXACT')
                }
                
            default:
                return query
        }
    }
    
    static recordSearchAttempt(searchQuery) {
        this.searchHistory.push({
            timestamp: Date.now(),
            strategy: searchQuery.strategy,
            query: searchQuery.originalQuery,
            optimizedQuery: searchQuery.optimizedQuery
        })
        
        console.log(`🔍 搜索策略: ${searchQuery.strategy} (预期效率: ${searchQuery.expectedEfficiency}%)`)
    }
    
    static generateSearchReport() {
        const strategyStats = this.searchHistory.reduce((stats, search) => {
            stats[search.strategy] = (stats[search.strategy] || 0) + 1
            return stats
        }, {})
        
        console.log(`📊 搜索策略统计:`)
        Object.entries(strategyStats).forEach(([strategy, count]) => {
            console.log(`  ${strategy}: ${count}次`)
        })
        
        return strategyStats
    }
}
```

### 4. 重复问题预防机制
```javascript
// 🔴 重复问题预防系统
class DuplicationPreventer {
    static processedIssues = new Set()
    static issuePatterns = {
        'DOMAIN_CONFIG': {
            pattern: /域名.*配置.*错误/,
            relatedFiles: ['config/env.js', 'project.private.config.json', '*.md'],
            batchStrategy: 'replace_all_occurrences'
        },
        'API_PATH': {
            pattern: /API.*路径.*错误/,
            relatedFiles: ['utils/api.js', 'pages/*/index.js'],
            batchStrategy: 'targeted_replacement'
        },
        'METHOD_CALL': {
            pattern: /方法.*调用.*错误/,
            relatedFiles: ['pages/*/index.js', 'components/*/index.js'],
            batchStrategy: 'import_and_call_fix'
        }
    }
    
    static checkDuplication(issue) {
        const issueKey = this.generateIssueKey(issue)
        
        if (this.processedIssues.has(issueKey)) {
            return {
                isDuplicate: true,
                message: `重复问题检测: ${issue.description}`,
                recommendation: '建议使用批处理策略一次性解决所有相关问题'
            }
        }
        
        for (const [patternType, config] of Object.entries(this.issuePatterns)) {
            if (config.pattern.test(issue.description)) {
                return {
                    isDuplicate: false,
                    patternType,
                    batchStrategy: config.batchStrategy,
                    relatedFiles: config.relatedFiles,
                    recommendation: `检测到${patternType}问题，建议批量处理`
                }
            }
        }
        
        return { isDuplicate: false }
    }
    
    static generateBatchPlan(issue, patternType) {
        const config = this.issuePatterns[patternType]
        
        return {
            type: 'BATCH_PROCESSING',
            patternType,
            strategy: config.batchStrategy,
            files: config.relatedFiles,
            estimatedTime: config.relatedFiles.length * 2000,
            parallelizable: true
        }
    }
    
    static generateIssueKey(issue) {
        return `${issue.type}_${issue.description.substring(0, 50)}`
    }
}
```

### 5. 自动化验证引擎
```javascript
// 🔴 自动化验证引擎
class AutomationValidationEngine {
    static validationRules = {
        'file_creation': {
            check: 'file_exists_before_creation',
            action: 'prevent_duplicate_creation'
        },
        'config_consistency': {
            check: 'domain_config_validation',
            action: 'auto_fix_domain_errors'
        },
        'api_path_validation': {
            check: 'api_endpoint_correctness',
            action: 'suggest_correct_path'
        },
        'method_call_validation': {
            check: 'import_function_usage',
            action: 'fix_method_call_errors'
        }
    }
    
    static async runAllValidations() {
        console.log('🔍 开始自动化验证...')
        
        const validationResults = []
        
        // 并行执行所有验证
        const validationPromises = Object.entries(this.validationRules).map(async ([ruleName, rule]) => {
            const result = await this.executeValidation(ruleName, rule)
            return { ruleName, ...result }
        })
        
        const results = await Promise.all(validationPromises)
        
        const failedValidations = results.filter(result => !result.passed)
        
        if (failedValidations.length > 0) {
            console.error(`🚨 验证失败: ${failedValidations.length}个规则`)
            return this.generateFixPlan(failedValidations)
        }
        
        console.log('✅ 所有验证通过')
        return { allPassed: true, results }
    }
    
    static async executeValidation(ruleName, rule) {
        try {
            const checkResult = await this.executeCheck(rule.check)
            
            if (!checkResult.passed) {
                const fixResult = await this.executeAction(rule.action, checkResult.data)
                return {
                    passed: false,
                    checkResult,
                    fixResult,
                    autoFixed: fixResult.success
                }
            }
            
            return { passed: true, checkResult }
            
        } catch (error) {
            return {
                passed: false,
                error: error.message,
                autoFixed: false
            }
        }
    }
    
    static async executeCheck(checkType) {
        switch (checkType) {
            case 'file_exists_before_creation':
                return await this.checkFileExistence()
                
            case 'domain_config_validation':
                return await this.checkDomainConfigs()
                
            case 'api_endpoint_correctness':
                return await this.checkAPIEndpoints()
                
            case 'import_function_usage':
                return await this.checkMethodCalls()
                
            default:
                throw new Error(`未知检查类型: ${checkType}`)
        }
    }
    
    static async executeAction(actionType, data) {
        switch (actionType) {
            case 'prevent_duplicate_creation':
                return this.preventDuplicateCreation(data)
                
            case 'auto_fix_domain_errors':
                return await this.fixDomainErrors(data)
                
            case 'suggest_correct_path':
                return this.suggestCorrectPaths(data)
                
            case 'fix_method_call_errors':
                return await this.fixMethodCallErrors(data)
                
            default:
                throw new Error(`未知行动类型: ${actionType}`)
        }
    }
}
```

### 6. 网络问题诊断系统
```javascript
// 🔴 网络问题诊断系统
class NetworkDiagnostics {
    static diagnosticTests = [
        'connectivity_test',
        'dns_resolution_test', 
        'ssl_certificate_test',
        'api_endpoint_test',
        'websocket_connection_test'
    ]
    
    static async runNetworkDiagnostics() {
        console.log('🌐 开始网络诊断...')
        
        const results = []
        
        // 并行执行所有诊断测试
        const testPromises = this.diagnosticTests.map(async test => {
            const result = await this.executeTest(test)
            return { test, ...result }
        })
        
        const testResults = await Promise.all(testPromises)
        
        const failedTests = testResults.filter(result => !result.passed)
        
        if (failedTests.length > 0) {
            console.error(`🚨 网络问题检测: ${failedTests.length}个测试失败`)
            return this.generateNetworkFixPlan(failedTests)
        }
        
        console.log('✅ 网络诊断通过')
        return { networkHealthy: true, results: testResults }
    }
    
    static async executeTest(testType) {
        try {
            switch (testType) {
                case 'connectivity_test':
                    return await this.testConnectivity()
                    
                case 'dns_resolution_test':
                    return await this.testDNSResolution()
                    
                case 'ssl_certificate_test':
                    return await this.testSSLCertificate()
                    
                case 'api_endpoint_test':
                    return await this.testAPIEndpoints()
                    
                case 'websocket_connection_test':
                    return await this.testWebSocketConnection()
                    
                default:
                    throw new Error(`未知测试类型: ${testType}`)
            }
        } catch (error) {
            return {
                passed: false,
                error: error.message,
                timestamp: Date.now()
            }
        }
    }
    
    static generateNetworkFixPlan(failedTests) {
        const fixPlan = {
            totalIssues: failedTests.length,
            issues: failedTests,
            recommendations: [],
            priority: 'HIGH'
        }
        
        failedTests.forEach(test => {
            switch (test.test) {
                case 'connectivity_test':
                    fixPlan.recommendations.push({
                        issue: '网络连接失败',
                        solution: '检查网络连接和防火墙设置',
                        priority: 'CRITICAL'
                    })
                    break
                    
                case 'dns_resolution_test':
                    fixPlan.recommendations.push({
                        issue: 'DNS解析失败',
                        solution: '检查DNS设置或使用备用DNS服务器',
                        priority: 'HIGH'
                    })
                    break
                    
                case 'ssl_certificate_test':
                    fixPlan.recommendations.push({
                        issue: 'SSL证书问题',
                        solution: '验证SSL证书有效性和域名匹配',
                        priority: 'HIGH'
                    })
                    break
            }
        })
        
        return fixPlan
    }
}
```

---

## 📚 规则引用说明

- **并行工具调用详细规则**: 详见 `1.mdc - ParallelCallEnforcer`
- **域名配置检查规则**: 详见 `1.mdc - DomainConfigChecker`
- **PowerShell语法验证**: 详见 `powershell-syntax-enforcer.mdc`
- **Token认证处理**: 详见 `1.mdc - TokenIssueResolver`
- **API调用验证**: 详见 `1.mdc - APICallValidator`

---

**规则创建时间**: 2025年01月08日  
**最后更新时间**: 2025年01月08日  
**更新内容**: 移除与1.mdc重复的规则，保留高级优化功能，建立规则引用关系  
**适用范围**: 所有需要效率优化的开发场景  
**维护状态**: ✅ 已优化 - 重复内容已清理，规则引用已建立

