---
description: 
globs: 
alwaysApply: true
---
---
description: "代码质量与运行时安全规范 - 防止导致小程序崩溃的常见编码错误"
globs: ["**/*.js", "**/*.ts", "pages/**/*", "utils/**/*", "components/**/*"]
alwaysApply: true
---

# 🚨 代码质量与运行时安全规范

## 🔴 核心目标：防止导致小程序崩溃的常见编码错误

### 1. 🛠️ 方法调用错误检查与规范

#### 导入函数调用规范：
```javascript
// ❌ 禁止：将导入函数当作对象方法调用
const { getTechnicalConfig } = require('./config')
// 错误调用
this.getTechnicalConfig()  // TypeError: this.getTechnicalConfig is not a function

// ✅ 正确：直接调用导入函数
getTechnicalConfig()
```

#### 模块导入一致性检查：
```javascript
// ✅ 统一导入路径和错误处理
const { validateForm } = require('../../utils/validate')
const { formatDate } = require('../../utils/util')

// 调用时直接使用函数名
const isValid = validateForm(formData)
const displayDate = formatDate(timestamp)
```

#### 详细代码注释规范：
```javascript
// ✅ 必须：为所有函数调用添加详细注释
// 获取技术配置信息，用于初始化系统参数
const config = getTechnicalConfig()

// 验证用户输入表单数据的完整性和格式
const isValid = validateForm(formData)

// 格式化时间戳为可读的日期格式
const displayDate = formatDate(timestamp)
```

### 2. 🔒 对象属性安全访问与存在性检查

#### 深层属性访问防护：
```javascript
// ❌ 禁止：不安全的属性访问
app.globalData.config.isDev  // 可能为undefined
user.profile.avatar.url      // 多层级访问风险

// ✅ 正确：提供后备值和安全检查
const config = app.globalData.config || app.globalData || { isDev: true }
const isDev = config.isDev || false

const avatarUrl = user?.profile?.avatar?.url || '/images/default-avatar.png'
```

#### 强制数据存在性检查：
```javascript
// ✅ 所有查询前必须验证数据是否存在
if (!app.globalData) {
  console.error('🚨 全局数据未初始化')
  return
}

if (!app.globalData.userInfo) {
  // 跳转到登录页面或显示登录提示
  wx.navigateTo({ url: '/pages/auth/auth' })
  return
}

// ✅ 深度思考项目代码逻辑，确保数据安全访问
const userInfo = app.globalData.userInfo
if (userInfo && userInfo.profile) {
  const avatar = userInfo.profile.avatar || '/images/default-avatar.png'
  // 安全使用用户头像数据
}
```

### 3. 🎨 API兼容性双重检查系统

#### Canvas API兼容性检查系统：
```javascript
// ✅ 正确：类型检查 + 存在检查 + 错误处理
if (compatibility.createLinearGradient && typeof ctx.createLinearGradient === 'function') {
  try {
    const gradient = ctx.createLinearGradient(0, 0, 100, 0)
    gradient.addColorStop(0, '#ff0000')
    gradient.addColorStop(1, '#00ff00')
    ctx.fillStyle = gradient
  } catch (error) {
    console.warn('线性渐变不支持，使用降级方案:', error)
    ctx.fillStyle = '#ff0000'  // 降级为纯色
  }
} else {
  ctx.fillStyle = '#ff0000'  // 直接使用降级方案
}
```

#### 微信小程序Canvas兼容性完整检查：
```javascript
// ✅ 完整的兼容性检查工具 (utils/compatibility-check.js)
const checkCanvasAPI = (ctx) => {
  return {
    createLinearGradient: typeof ctx.createLinearGradient === 'function',
    createRadialGradient: typeof ctx.createRadialGradient === 'function',
    quadraticCurveTo: typeof ctx.quadraticCurveTo === 'function',
    bezierCurveTo: typeof ctx.bezierCurveTo === 'function',
    setLineDash: typeof ctx.setLineDash === 'function',
    filter: 'filter' in ctx
  }
}

// 使用示例 - 考虑微信小程序API兼容性
const compatibility = checkCanvasAPI(ctx)
if (compatibility.quadraticCurveTo) {
  // 使用贝塞尔曲线绘制流线型设计
  ctx.quadraticCurveTo(cp1x, cp1y, x, y)
} else {
  // 降级为直线设计，确保兼容性
  ctx.lineTo(x, y)
}
```

#### 创建渐变兼容性检查：
```javascript
// ✅ createRadialGradient兼容性检查
if (compatibility.createRadialGradient && typeof ctx.createRadialGradient === 'function') {
  try {
    const gradient = ctx.createRadialGradient(x0, y0, r0, x1, y1, r1)
    // 安全使用径向渐变
  } catch (error) {
    console.warn('径向渐变不支持:', error)
    // 使用降级方案
  }
}

// ✅ filter属性兼容性检查
if (compatibility.filter && 'filter' in ctx) {
  try {
    ctx.filter = 'blur(5px)'
    // 安全使用滤镜效果
  } catch (error) {
    console.warn('滤镜效果不支持:', error)
    // 使用降级方案
  }
}
```

### 4. 🚀 错误处理与智能降级策略

#### 三层错误处理机制：
```javascript
// ✅ 第一层：功能检查
if (!compatibility.targetAPI) {
  console.warn('API不支持，使用降级方案')
  return fallbackMethod()
}

// ✅ 第二层：类型检查
if (typeof ctx.targetAPI !== 'function') {
  console.warn('API类型异常，使用降级方案')
  return fallbackMethod()
}

// ✅ 第三层：运行时错误捕获
try {
  return ctx.targetAPI(...args)
} catch (error) {
  console.error('API调用失败:', error)
  return fallbackMethod()
}
```

#### 智能降级策略：
```javascript
// ✅ 根据兼容性检查结果智能选择策略
const drawWithCompatibility = (ctx, compatibility) => {
  if (compatibility.createRadialGradient && compatibility.quadraticCurveTo) {
    // 高级绘制：渐变 + 曲线，视觉美感 95%+
    drawAdvancedStyle(ctx)
  } else if (compatibility.createLinearGradient) {
    // 中级绘制：线性渐变，视觉美感 80%+
    drawMediumStyle(ctx)
  } else {
    // 基础绘制：纯色填充，视觉美感 60%+，确保100%兼容性
    drawBasicStyle(ctx)
  }
}
```

#### 增强错误处理与解决建议：
```javascript
// ✅ 提供明确的错误信息和解决建议
const handleError = (error, context) => {
  const errorMap = {
    'TypeError': '类型错误 - 请检查变量类型和方法调用',
    'ReferenceError': '引用错误 - 请检查变量是否已定义',
    'Canvas API Error': 'Canvas API不兼容 - 已启用降级方案'
  }
  
  const errorType = error.name || 'Unknown'
  const suggestion = errorMap[errorType] || '请检查代码逻辑和环境兼容性'
  
  console.error(`🚨 ${context}发生错误:`, error)
  console.warn(`💡 建议解决方案: ${suggestion}`)
  
  // 显示用户友好的错误提示
  wx.showToast({
    title: '功能暂时不可用',
    icon: 'none',
    duration: 2000
  })
}
```

### 5. 📋 代码审查自动检查规则

#### 必须拒绝的危险代码模式：
```regex
# 检查方法调用错误
this\.[a-zA-Z]+Config\(\)
this\.[a-zA-Z]+Util\(\)
this\.[a-zA-Z]+API\(\)

# 检查不安全属性访问
globalData\.[a-zA-Z]+\.[a-zA-Z]+(?!\s*(\|\||&&|\?\.))
app\.[a-zA-Z]+\.[a-zA-Z]+\.[a-zA-Z]+(?!\s*(\|\||&&|\?\.))

# 检查Canvas API调用缺少兼容性检查
(createLinearGradient|createRadialGradient|quadraticCurveTo)(?!.*typeof)(?!.*compatibility)

# 检查缺少错误处理的API调用
(wx\.[a-zA-Z]+|ctx\.[a-zA-Z]+)(?!.*try)(?!.*catch)
```

#### 必须通过的安全代码模式：
- [ ] 导入函数直接调用：`函数名()`，不使用`this.函数名()`
- [ ] 安全属性访问：`obj?.prop || defaultValue` 或 `obj.prop || defaultValue`
- [ ] 双重API检查：`if (compatibility.api && typeof ctx.api === 'function')`
- [ ] 完整错误处理：`try-catch` + 降级方案
- [ ] 数据存在性验证：调用前检查对象是否存在
- [ ] 详细代码注释：说明函数用途和参数含义

### 6. 🎯 重点防护场景与测试数据同步

#### 微信小程序特定场景：
1. **Canvas 2D渲染兼容性** - 不同设备对Canvas API支持程度不同
2. **模块导入函数调用** - CommonJS导入的函数不能作为方法调用
3. **全局配置对象访问** - app.globalData可能未初始化
4. **设备API兼容性** - 不同版本微信对API支持不同

#### 测试数据同步机制：
```javascript
// ✅ 修改初始化脚本时同步更新测试脚本
const initTestData = () => {
  // 与后端API数据结构保持一致
  return mockDataStructure  // 结构一致，数据可以是测试数据
}

// ✅ 统一测试数据管理配置
const testConfig = {
  dataStructure: 'consistent_with_backend',
  syncMechanism: 'auto_update',
  errorHandling: 'comprehensive'
}
```

### 7. 🔧 项目运行状态检查机制

#### 完成任务后的项目运行检查：
```javascript
// ✅ 项目运行状态自检机制
const checkProjectHealth = () => {
  const checks = {
    // 检查核心组件是否正常
    components: checkComponentsStatus(),
    // 检查API连接状态
    apiConnection: checkAPIStatus(),
    // 检查数据完整性
    dataIntegrity: checkDataIntegrity(),
    // 检查兼容性支持
    compatibility: checkCompatibility()
  }
  
  const issues = []
  Object.keys(checks).forEach(key => {
    if (!checks[key].status) {
      issues.push({
        type: key,
        error: checks[key].error,
        solution: checks[key].solution
      })
    }
  })
  
  if (issues.length > 0) {
    console.error('🚨 项目运行检查发现问题:', issues)
    // 立即修复发现的问题
    fixProjectIssues(issues)
  } else {
    console.log('✅ 项目运行状态良好')
  }
}
```

#### 问题类型分析与解决：
```javascript
// ✅ 考虑组件缺失、组件错误、逻辑方案、环境问题等
const analyzeAndSolve = (error) => {
  const problemTypes = {
    'Component Missing': {
      analysis: '检查组件文件是否存在',
      solution: '重新创建或修复组件文件'
    },
    'Component Error': {
      analysis: '组件逻辑错误或API调用问题',
      solution: '检查组件代码和API调用'
    },
    'Logic Error': {
      analysis: '业务逻辑方案不正确',
      solution: '重新设计业务逻辑流程'
    },
    'Environment Issue': {
      analysis: '开发环境配置问题',
      solution: '检查微信开发者工具配置'
    }
  }
  
  return problemTypes[error.type] || {
    analysis: '未知问题类型',
    solution: '请进行全面的代码审查'
  }
}
```

### 8. 🧹 代码清理与文件管理

#### 自动清理临时文件规则：
```javascript
// ✅ 任务完成后自动删除临时文件、测试文件
const cleanupTemporaryFiles = () => {
  const tempPatterns = [
    '**/*.temp.js',
    '**/*.test.tmp',
    '**/temp_*',
    '**/*.backup',
    '**/*.log'
  ]
  
  tempPatterns.forEach(pattern => {
    // 使用PowerShell命令清理文件
    // Get-ChildItem . -Recurse -Include pattern | Remove-Item
    console.log(`🧹 清理临时文件: ${pattern}`)
  })
  
  // 删除无用的重复文件和无用的md文件
  cleanupDuplicateFiles()
  cleanupUnusedMarkdownFiles()
}
```

## 🎯 规则优先级：直接影响程序稳定性和用户体验

---
**适用范围**: 微信小程序项目代码质量控制  
**最后更新**: 2025年1月2日
**整合状态**: 已整合1.mdc中的代码质量和运行时安全相关规则


