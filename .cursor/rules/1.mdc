---
description: 
globs: 
alwaysApply: true
---
# 🚨 会话问题分析与解决方案 - 核心规则集

## 📊 问题清单与严重程度分级

### A级问题（严重 - 导致任务中断）

#### 1. 重复文件创建问题
- **现象**：创建了两个1.mdc文件，没有提前检查文件是否存在
- **根本原因**：缺乏文件创建前的检查机制
- **影响**：违反"不浪费Claude 4 Sonnet请求次数"规则，造成用户困惑
- **解决方案**：实施FileCreationValidator强制检查机制

#### 2. 文档日期错误
- **现象**：文档更新日期写成2025年1月3日，实际应为当前日期
- **根本原因**：AI模型时间认知错误，未正确获取当前日期
- **影响**：文档版本管理混乱，用户困惑
- **解决方案**：强制使用PowerShell `Get-Date` 命令获取当前日期

#### 3. PowerShell控制台缓冲区溢出异常
- **详细规则参考**：`development-automation-unified.mdc` - PowerShell控制台稳定性保障
- **触发条件**：包含中文字符的长命令 > 100字符
- **具体触发命令**：`Get-ChildItem pages -Directory | Measure-Object | Select-Object -ExpandProperty Count`
- **根本原因**：PSConsoleReadLine模块对中文字符处理存在缺陷
- **预防机制**：拆分长命令，避免中文字符+复杂管道组合

#### 4. 工具调用参数验证错误
- **详细规则参考**：`development-automation-unified.mdc` - 工具调用参数验证系统
- **现象**：read_file工具调用时end_line_one_indexed_inclusive < start_line_one_indexed导致失败
- **根本原因**：参数验证逻辑缺失，未检查行数范围合理性
- **解决方案**：实施工具调用参数验证规则

#### 5. 微信小程序启动方式错误识别
- **详细规则参考**：`development-automation-unified.mdc` - 微信小程序项目自动识别系统
- **现象**：尝试使用npm start启动微信小程序项目
- **根本原因**：混淆了Web项目和小程序项目的启动方式
- **解决方案**：明确微信小程序只能通过开发者工具启动

### B级问题（中等 - 效率损失）

#### 6. 并行工具调用利用不充分
- **现象**：多个独立的工具调用串行执行，而非并行执行
- **根本原因**：未充分利用并行工具调用能力，缺乏并行执行意识
- **影响**：执行效率损失50-80%，违反"不浪费Claude 4 Sonnet请求次数"规则
- **解决方案**：强制并行工具调用优化策略

#### 7. 工具调用串行化低效
- **现象**：多个可并行的工具调用分别执行
- **示例**：read_file、grep_search、run_terminal_cmd串行执行
- **影响**：会话时间延长3-5倍，浪费Claude 4 Sonnet请求次数
- **解决方案**：强制使用Promise.all()并行执行

#### 8. search_replace工具字符串匹配失败
- **现象**：search_replace操作因字符串匹配不精确而失败
- **根本原因**：缺少足够的上下文行，特殊字符未正确处理，长文档编辑策略不当
- **解决方案**：实施长文档编辑策略规范，超过2500行强制使用edit_file工具

#### 9. 大文件编辑策略选择不当
- **现象**：对超过2500行的文件使用search_replace工具而非edit_file工具
- **根本原因**：缺乏大文件编辑策略指导，工具选择不当
- **解决方案**：实施大文件编辑策略规范

#### 10. 信息收集策略不完整
- **详细规则参考**：`development-automation-unified.mdc` - 三阶段信息收集策略
- **现象**：任务开始时没有制定完整的信息收集计划，导致多次补充读取文件
- **根本原因**：缺乏任务前的全面分析和规划，未充分利用并行工具调用能力
- **解决方案**：实施三阶段信息收集策略，强制并行工具调用优化

#### 11. 正则表达式特殊字符处理不当
- **错误**：`console.log.*[🔧🔗📨❌✅]` 未转义emoji字符
- **结果**：Select-String执行失败
- **原因**：特殊字符转义规则不完善
- **解决方案**：自动转义emoji和特殊字符

### C级问题（轻微 - 流程不规范）

#### 12. Mock数据检测不完整
- **详细规则参考**：`tiangong-security-standards (1).mdc` - Mock数据安全检测与防护
- **现象**：Mock数据检测存在漏网之鱼，导致多次修复
- **根本原因**：检测规则不够全面，关键字覆盖不足
- **解决方案**：完善Mock数据检测规则，增加自动化检测

#### 13. 搜索策略过度细分
- **现象**：使用过于具体的搜索queries而非语义化搜索
- **根本原因**：未充分利用codebase_search的语义理解能力
- **解决方案**：优化搜索策略，使用语义化搜索

#### 14. 任务验证不完整
- **现象**：修改完成后未充分验证结果
- **根本原因**：缺乏标准化的验证流程
- **解决方案**：建立完整的任务验证检查清单

## 🔧 强制预防规则

### 1. 工具调用参数验证规则
```javascript
// 🔴 read_file工具调用前强制参数验证
class ReadFileValidator {
    static validateParams(start_line, end_line, total_lines) {
        const errors = []
        
        if (start_line < 1) {
            errors.push('start_line必须大于等于1')
        }
        
        if (end_line < start_line) {
            errors.push('end_line必须大于等于start_line')
        }
        
        if (total_lines && end_line > total_lines) {
            errors.push(`end_line(${end_line})超过文件总行数(${total_lines})`)
        }
        
        const rangeSize = end_line - start_line + 1
        if (rangeSize > 1000) {
            errors.push('单次读取行数不应超过1000行，建议分批读取')
        }
        
        return errors
    }
    
    static createSafeParams(start_line, end_line, total_lines) {
        return {
            start_line_one_indexed: Math.max(1, Math.min(start_line, total_lines || 1)),
            end_line_one_indexed_inclusive: Math.max(start_line, Math.min(end_line, total_lines || start_line)),
            should_read_entire_file: false
        }
    }
}
```

### 2. 并行工具调用强制优化规则
```javascript
// 🔴 并行工具调用管理器
class ParallelToolManager {
    constructor() {
        this.efficiency = {
            parallelCalls: 0,
            serialCalls: 0,
            timeSaved: 0
        }
    }
    
    // 🔴 检测可并行的工具调用
    detectParallelOpportunities(toolCalls) {
        const readOnlyTools = ['read_file', 'grep_search', 'list_dir', 'file_search', 'codebase_search']
        
        const independent = toolCalls.filter(call => 
            readOnlyTools.includes(call.tool) && !call.dependsOn
        )
        
        if (independent.length > 1) {
            console.warn(`⚠️ 检测到${independent.length}个可并行调用，建议使用Promise.all()`)
            return {
                canOptimize: true,
                tools: independent,
                estimatedTimeSaving: (independent.length - 1) * 3
            }
        }
        
        return { canOptimize: false }
    }
    
    // 🔴 强制并行执行
    async executeParallel(toolCalls) {
        console.log(`🚀 并行执行${toolCalls.length}个工具调用`)
        
        const startTime = Date.now()
        const results = await Promise.all(toolCalls.map(call => call.execute()))
        const endTime = Date.now()
        
        this.efficiency.parallelCalls += toolCalls.length
        this.efficiency.timeSaved += (toolCalls.length - 1) * 3000
        
        console.log(`✅ 并行执行完成，耗时${endTime - startTime}ms，节省${this.efficiency.timeSaved}ms`)
        return results
    }
}
```

### 3. 大文件编辑策略规范
```javascript
// 🔴 大文件编辑策略选择器
class FileEditingStrategy {
    static getStrategy(filePath, fileSize, lineCount) {
        const SIZE_THRESHOLD = 2500 // 行数阈值
        
        if (lineCount > SIZE_THRESHOLD) {
            console.warn(`🔧 大文件检测：${filePath} 有${lineCount}行，超过${SIZE_THRESHOLD}行阈值`)
            return 'edit_file'
        }
        
        if (fileSize > 100 * 1024) { // 100KB
            console.warn(`🔧 大文件检测：${filePath} 大小${fileSize}字节，建议使用edit_file`)
            return 'edit_file'
        }
        
        return 'search_replace'
    }
    
    static createEditingPlan(filePath, changes) {
        const strategy = this.getStrategy(filePath, changes.fileSize, changes.lineCount)
        
        return {
            tool: strategy,
            approach: strategy === 'edit_file' ? 'complete_replacement' : 'targeted_replacement',
            warnings: strategy === 'edit_file' ? 
                ['大文件编辑，请确保上下文充足'] : 
                ['小文件编辑，确保匹配字符串唯一'],
            estimatedTime: strategy === 'edit_file' ? 5 : 3
        }
    }
}
```

### 4. 搜索策略优化规则
```javascript
// 🔴 搜索策略优化器
class SearchStrategyOptimizer {
    constructor() {
        this.searchPatterns = {
            SEMANTIC: 'semantic_search',
            EXACT: 'exact_search',
            HYBRID: 'hybrid_search'
        }
    }
    
    // 🔴 选择最适合的搜索策略
    selectStrategy(query, context) {
        const semanticKeywords = ['how', 'where', 'what', 'when', 'why', 'which']
        const exactKeywords = ['function', 'class', 'const', 'let', 'var']
        
        const isSemanticQuery = semanticKeywords.some(keyword => 
            query.toLowerCase().includes(keyword)
        )
        
        const isExactQuery = exactKeywords.some(keyword => 
            query.includes(keyword)
        )
        
        if (isSemanticQuery && !isExactQuery) {
            return {
                strategy: this.searchPatterns.SEMANTIC,
                tool: 'codebase_search',
                query: this.optimizeSemanticQuery(query)
            }
        }
        
        if (isExactQuery && !isSemanticQuery) {
            return {
                strategy: this.searchPatterns.EXACT,
                tool: 'grep_search',
                query: this.optimizeExactQuery(query)
            }
        }
        
        return {
            strategy: this.searchPatterns.HYBRID,
            tools: ['codebase_search', 'grep_search'],
            queries: [this.optimizeSemanticQuery(query), this.optimizeExactQuery(query)]
        }
    }
    
    // 🔴 优化语义搜索查询
    optimizeSemanticQuery(query) {
        if (!query.includes('?')) {
            return `How does ${query} work?`
        }
        return query
    }
    
    // 🔴 优化精确搜索查询
    optimizeExactQuery(query) {
        return query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
    }
}
```

### 5. 日期时间自动获取规则
```powershell
# 🔴 强制使用PowerShell获取当前日期
Get-Date -Format "yyyy年MM月dd日"        # 文档格式
Get-Date -Format "yyyy-MM-dd"            # 版本格式

# 🔴 禁止手动输入日期
# ❌ 错误：手动写入"2025年1月3日"
# ✅ 正确：使用Get-Date命令获取
```

### 6. 正则表达式安全处理规则
```javascript
// 🔴 自动emoji转义处理
function createSafeRegexPattern(unsafePattern) {
    const emojiMap = {
        '🔧': '\\u{1F527}',
        '🔗': '\\u{1F517}',
        '📨': '\\u{1F4E8}',
        '❌': '\\u{274C}',
        '✅': '\\u{2705}'
    }
    
    let safePattern = unsafePattern
    for (const [emoji, unicode] of Object.entries(emojiMap)) {
        safePattern = safePattern.replace(
            new RegExp(emoji.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), 
            unicode
        )
    }
    
    return safePattern
}
```

## 📊 沟通质量评估系统

### 沟通效果监控机制
```javascript
// 🔴 沟通质量评估指标
const COMMUNICATION_QUALITY_METRICS = {
    completeness: {
        hasTaskConfirmation: true,
        hasLimitationExplanation: true,
        hasAlternativeSolutions: true,
        hasCommitmentStatement: true
    },
    
    usefulness: {
        providesActionableSteps: true,
        addressesUserConcerns: true,
        offersMultipleOptions: true,
        maintainsPositiveAttitude: true
    },
    
    clarity: {
        usesStructuredFormat: true,
        avoidsJargon: true,
        providesExamples: true,
        usesVisualElements: true
    }
}
```

## 🔧 问题预防检查清单

### 会话开始前沟通检查
```
🔴 每次响应前必须检查：
1. 是否理解了用户的真实需求？
2. 是否诚实说明了技术限制？
3. 是否提供了替代解决方案？
4. 是否表达了积极解决态度？
5. 是否遵守了所有用户规则？

⚠️ 任何一项不满足都禁止发送响应
```

### 重复任务处理检查
```
🔴 重复任务识别检查：
1. 用户是否明确表示这是重复任务？
2. 是否需要完整重新执行？
3. 是否需要保证内容完整性？
4. 是否需要严格遵守规则？

✅ 重复任务必须100%重新执行
```

## 🚀 2025年01月03日新增问题模式识别规则

### 7. 问题模式识别系统
```javascript
// 🔴 问题模式识别与分类系统
class ProblemPatternRecognizer {
    constructor() {
        this.patterns = {
            'CONFIGURATION_ERROR': {
                keywords: ['域名', '配置', '错误', 'domain', 'config'],
                severity: 'HIGH',
                autoFixable: true,
                relatedFiles: ['config/env.js', '*.md'],
                solution: 'BatchConfigurationFix'
            },
            'API_CALLING_ERROR': {
                keywords: ['API', '路径', '错误', 'path', 'endpoint'],
                severity: 'HIGH',
                autoFixable: true,
                relatedFiles: ['utils/api.js', 'pages/*/index.js'],
                solution: 'APIPathCorrection'
            },
            'METHOD_INVOCATION_ERROR': {
                keywords: ['方法', '调用', '错误', 'this.', 'function'],
                severity: 'MEDIUM',
                autoFixable: true,
                relatedFiles: ['pages/*/index.js', 'components/*/index.js'],
                solution: 'MethodCallFix'
            },
            'TIMEOUT_VIOLATION': {
                keywords: ['超时', '120秒', 'timeout', '卡住'],
                severity: 'CRITICAL',
                autoFixable: true,
                relatedFiles: ['*'],
                solution: 'TimeoutManagement'
            },
            'PARALLEL_OPPORTUNITY': {
                keywords: ['串行', '并行', '效率', 'parallel', 'serial'],
                severity: 'MEDIUM',
                autoFixable: true,
                relatedFiles: ['*'],
                solution: 'ParallelOptimization'
            }
        }
        
        this.recognitionHistory = []
    }
    
    // 🔴 识别问题模式
    recognizePattern(description, context = {}) {
        const recognizedPatterns = []
        
        Object.entries(this.patterns).forEach(([patternType, config]) => {
            const matchScore = this.calculateMatchScore(description, config.keywords)
            
            if (matchScore > 0.5) { // 匹配度超过50%
                recognizedPatterns.push({
                    type: patternType,
                    matchScore,
                    severity: config.severity,
                    autoFixable: config.autoFixable,
                    relatedFiles: config.relatedFiles,
                    solution: config.solution,
                    confidence: this.calculateConfidence(matchScore, context)
                })
            }
        })
        
        // 按匹配度排序
        recognizedPatterns.sort((a, b) => b.matchScore - a.matchScore)
        
        // 记录识别历史
        this.recognitionHistory.push({
            timestamp: Date.now(),
            description,
            patterns: recognizedPatterns
        })
        
        return recognizedPatterns
    }
    
    // 🔴 计算匹配分数
    calculateMatchScore(description, keywords) {
        const lowerDescription = description.toLowerCase()
        const matchedKeywords = keywords.filter(keyword => 
            lowerDescription.includes(keyword.toLowerCase())
        )
        
        return matchedKeywords.length / keywords.length
    }
    
    // 🔴 计算置信度
    calculateConfidence(matchScore, context) {
        let confidence = matchScore
        
        // 基于上下文调整置信度
        if (context.hasErrorDetails) confidence += 0.1
        if (context.hasStackTrace) confidence += 0.1
        if (context.hasReproductionSteps) confidence += 0.1
        
        return Math.min(1.0, confidence)
    }
    
    // 🔴 生成解决方案建议
    generateSolutionRecommendation(recognizedPatterns) {
        if (recognizedPatterns.length === 0) {
            return {
                recommendation: 'MANUAL_ANALYSIS',
                message: '未识别到已知问题模式，需要手动分析',
                priority: 'MEDIUM'
            }
        }
        
        const topPattern = recognizedPatterns[0]
        
        return {
            recommendation: topPattern.solution,
            message: `识别到${topPattern.type}问题模式，建议使用${topPattern.solution}解决`,
            priority: topPattern.severity,
            confidence: topPattern.confidence,
            autoFixable: topPattern.autoFixable,
            relatedFiles: topPattern.relatedFiles
        }
    }
}
```

### 8. 责任边界检查系统
```javascript
// 🔴 责任边界检查系统
class ResponsibilityBoundaryChecker {
    constructor() {
        this.boundaries = {
            'FRONTEND': {
                responsibilities: [
                    '用户界面显示',
                    '用户交互处理',
                    '数据展示格式化',
                    '客户端验证',
                    '页面路由管理'
                ],
                prohibitions: [
                    '业务逻辑计算',
                    '数据权限验证',
                    '抽奖概率计算',
                    '支付处理',
                    '用户认证'
                ],
                dataSource: 'BACKEND_API_ONLY'
            },
            'BACKEND': {
                responsibilities: [
                    '业务逻辑处理',
                    '数据权限验证',
                    'API接口提供',
                    '数据库操作',
                    '用户认证授权'
                ],
                prohibitions: [
                    '界面渲染',
                    '用户交互',
                    '前端状态管理'
                ],
                dataSource: 'DATABASE_AND_BUSINESS_LOGIC'
            },
            'DATABASE': {
                responsibilities: [
                    '数据存储',
                    '数据查询',
                    '数据完整性',
                    '事务管理'
                ],
                prohibitions: [
                    '业务逻辑',
                    '数据格式化',
                    '用户界面'
                ],
                dataSource: 'PERSISTENT_STORAGE'
            }
        }
    }
    
    // 🔴 检查责任边界违规
    checkBoundaryViolation(component, action, context) {
        const boundary = this.boundaries[component.toUpperCase()]
        
        if (!boundary) {
            return {
                violation: true,
                type: 'UNKNOWN_COMPONENT',
                message: `未知组件: ${component}`,
                severity: 'HIGH'
            }
        }
        
        // 检查是否是禁止的操作
        const isProhibited = boundary.prohibitions.some(prohibition => 
            action.toLowerCase().includes(prohibition.toLowerCase())
        )
        
        if (isProhibited) {
            return {
                violation: true,
                type: 'RESPONSIBILITY_VIOLATION',
                component,
                action,
                message: `${component}不应该执行: ${action}`,
                severity: 'CRITICAL',
                correctComponent: this.findCorrectComponent(action),
                suggestion: this.generateBoundarySuggestion(component, action)
            }
        }
        
        // 检查是否是正确的责任范围
        const isResponsible = boundary.responsibilities.some(responsibility => 
            action.toLowerCase().includes(responsibility.toLowerCase())
        )
        
        if (!isResponsible) {
            return {
                violation: true,
                type: 'UNCLEAR_RESPONSIBILITY',
                component,
                action,
                message: `${component}对${action}的责任不明确`,
                severity: 'MEDIUM',
                suggestion: '请明确责任归属或重新设计架构'
            }
        }
        
        return {
            violation: false,
            message: `${component}执行${action}符合责任边界`,
            component,
            action
        }
    }
    
    // 🔴 查找正确的组件
    findCorrectComponent(action) {
        for (const [component, boundary] of Object.entries(this.boundaries)) {
            const isResponsible = boundary.responsibilities.some(responsibility => 
                action.toLowerCase().includes(responsibility.toLowerCase())
            )
            
            if (isResponsible) {
                return component
            }
        }
        
        return 'UNKNOWN'
    }
    
    // 🔴 生成边界建议
    generateBoundarySuggestion(component, action) {
        const correctComponent = this.findCorrectComponent(action)
        
        if (correctComponent !== 'UNKNOWN') {
            return {
                currentComponent: component,
                correctComponent,
                action,
                suggestion: `将${action}从${component}移至${correctComponent}`,
                architectureChange: true
            }
        }
        
        return {
            currentComponent: component,
            action,
            suggestion: '重新评估架构设计，明确责任分工',
            architectureChange: true
        }
    }
    
    // 🔴 检查数据流向
    checkDataFlow(source, target, dataType) {
        const sourceComponent = this.boundaries[source.toUpperCase()]
        const targetComponent = this.boundaries[target.toUpperCase()]
        
        if (!sourceComponent || !targetComponent) {
            return {
                violation: true,
                type: 'INVALID_COMPONENT',
                message: `无效的数据流: ${source} -> ${target}`
            }
        }
        
        // 检查数据流向是否合理
        const validFlows = {
            'DATABASE_TO_BACKEND': true,
            'BACKEND_TO_FRONTEND': true,
            'FRONTEND_TO_BACKEND': true,
            'BACKEND_TO_DATABASE': true,
            'FRONTEND_TO_DATABASE': false,  // 直接访问数据库违规
            'DATABASE_TO_FRONTEND': false   // 直接访问数据库违规
        }
        
        const flowKey = `${source.toUpperCase()}_TO_${target.toUpperCase()}`
        const isValidFlow = validFlows[flowKey]
        
        if (isValidFlow === false) {
            return {
                violation: true,
                type: 'INVALID_DATA_FLOW',
                source,
                target,
                dataType,
                message: `禁止的数据流: ${source} -> ${target}`,
                severity: 'CRITICAL',
                suggestion: '前端必须通过后端API访问数据，禁止直接访问数据库'
            }
        }
        
        return {
            violation: false,
            message: `合法的数据流: ${source} -> ${target}`,
            source,
            target,
            dataType
        }
    }
}
```

---

## 📚 相关规则文档引用

- **PowerShell控制台稳定性**: 详见 `development-automation-unified.mdc`
- **工具调用参数验证**: 详见 `1.mdc` - 工具调用参数验证规则
- **并行工具调用优化**: 详见 `1.mdc` - 并行工具调用强制优化规则
- **微信小程序项目识别**: 详见 `development-automation-unified.mdc`
- **信息收集策略**: 详见 `development-automation-unified.mdc`
- **安全标准规范**: 详见 `tiangong-security-standards (1).mdc`
- **高级优化规则**: 详见 `advanced-optimization.mdc`
- **核心问题预防**: 详见 `problem-prevention-core.mdc`

---

**规则创建时间**: $(Get-Date -Format "yyyy年MM月dd日")  
**最后更新时间**: $(Get-Date -Format "yyyy年MM月dd日")  
**更新内容**: 新增问题模式识别系统和责任边界检查系统，完善问题分析能力  
**适用范围**: 所有会话问题分析和解决场景  
**维护状态**: ✅ 已完善 - 问题分析规则完整性已保证
















