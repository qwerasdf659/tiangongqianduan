---
description:
globs:
alwaysApply: false
---
---
description: "天工项目数据安全核心规则 - 严禁前端硬编码敏感业务数据，强制后端API依赖"
globs: ["**/*.js", "**/*.ts", "pages/**/*", "utils/**/*", "components/**/*"]
alwaysApply: true
---

# 🔐 天工项目数据安全核心规则

## 🚨 核心安全原则 - 违反则立即停止开发

### 1. 绝对禁止前端硬编码敏感业务数据

**严禁硬编码**以下类型的数据：
- ✅ **抽奖奖品配置**：奖品名称、类型、概率等
- ✅ **中奖率设置**：任何形式的概率数值
- ✅ **商品价格信息**：积分价格、现金价格等
- ✅ **用户权限配置**：角色权限、功能开关等
- ✅ **系统配置参数**：业务规则、限制数值等

**检测关键词**：prizes, products, price, probability, Math.random

#### 危险代码标识：
```javascript
// ❌ 严禁：前端硬编码奖品配置
const PRIZES = [
  { name: '奖品1', probability: 10 },
  { name: '奖品2', probability: 20 }
]

// ❌ 严禁：前端硬编码商品价格
const PRODUCTS = [
  { id: 1, name: '商品1', price: 100 }
]

// ❌ 严禁：前端计算业务逻辑
const probability = Math.random() * 100
const userPermission = user.role === 'admin'
```

### 2. 绝对禁止使用模拟数据替代后端API

**严禁Mock标识词**：mock, fake, test, demo, setTimeout模拟异步

#### 必须拒绝的代码模式：
```javascript
// ❌ 严禁：Mock数据函数
const mockRequest = () => { /* 假数据 */ }
const shouldUseMock = () => true
const smartApiCall = (real, mock) => mock

// ❌ 严禁：setTimeout模拟异步
setTimeout(() => {
  callback({ data: mockData })
}, 1000)

// ❌ 严禁：前端生成业务数据
const generateMockProducts = () => [...]
```

### 3. 强制后端依赖检查与错误处理

**必须遵循**的数据获取原则：
- 🔴 **所有业务数据必须从后端API获取**
- 🔴 **严禁使用前端模拟数据替代真实后端数据**
- 🔴 **不允许前端生成、计算或修改业务核心数据**
- 🔴 **前端仅负责数据展示和用户交互**

#### 正确的API调用模式：
```javascript
// ✅ 正确：真实API调用 + 错误处理
api.getData().then(result => {
  if (result.code === 0) {
    // 使用后端数据
  } else {
    throw new Error('⚠️ 后端服务异常：' + result.msg)
  }
}).catch(error => {
  wx.showModal({
    title: '🚨 后端服务问题',
    content: '无法获取数据！请检查后端API服务状态。'
  })
})
```

### 4. 📋 具体实施规则

#### 抽奖系统规范：
```javascript
// ✅ 正确做法 - 从后端获取配置
lotteryAPI.getConfig().then(result => {
  if (result.code === 0) {
    this.setData({ 
      prizes: result.data.prizes,
      costPoints: result.data.cost_points 
    })
  } else {
    throw new Error('获取抽奖配置失败')
  }
}).catch(error => {
  wx.showModal({
    title: '⚠️ 后端服务异常', 
    content: '无法获取抽奖配置！请检查后端API服务。'
  })
})

// ❌ 错误做法 - 前端硬编码
const prizes = [
  { name: '奖品1', probability: 10 },
  { name: '奖品2', probability: 20 }
]
```

#### 商品管理规范：
```javascript
// ✅ 正确做法 - 后端数据源
exchangeAPI.getProducts().then(result => {
  if (result.code === 0) {
    this.setData({ products: result.data.products })
  } else {
    throw new Error('获取商品列表失败')
  }
})

// ❌ 错误做法 - 前端模拟
const mockProducts = [
  { id: 1, name: '商品1', price: 100 }
]
```

#### 用户权限验证：
```javascript
// ✅ 正确做法 - 后端验证
userAPI.checkPermission('merchant').then(result => {
  this.setData({ hasPermission: result.data.allowed })
})

// ❌ 错误做法 - 前端判断
const hasPermission = userInfo.role === 'merchant'
```

### 5. 🚨 后端异常处理机制

当后端服务异常时必须：
- ⚠️ **立即向开发者显示明确的错误提示**
- ⚠️ **说明具体的后端服务问题（API不可用、数据格式错误等）**
- ⚠️ **提供可能的解决方案建议**
- ⚠️ **记录详细的错误日志便于排查**
- ❌ **严禁使用假数据掩盖后端问题**

#### 错误提示模板：
```javascript
wx.showModal({
  title: '⚠️ 后端服务异常',
  content: `无法获取${dataType}数据！\n\n可能原因：\n1. 后端API服务未启动\n2. ${apiName}接口异常\n3. 数据库连接问题\n\n请立即检查后端服务状态！`,
  showCancel: false,
  confirmText: '知道了',
  confirmColor: '#ff4444'
})
```

### 6. 🔍 违规代码自动检测规则

#### 立即拒绝包含以下模式的代码：

1. **硬编码数据标识**：
   - 数组/对象字面量包含业务数据
   - `const PRIZES = [...]`
   - `const PRODUCTS = [...]`
   - `const CONFIG = { probability: ... }`

2. **Mock/模拟标识**：
   - `mock`、`fake`、`test`、`demo`关键词
   - `shouldUseMock`、`smartApiCall`函数
   - `setTimeout`模拟异步操作
   - `Math.random()`生成业务数据

3. **前端业务逻辑**：
   - 概率计算：`Math.random() * 100`
   - 权限判断：`user.role === 'admin'`
   - 价格计算：前端计算商品价格

#### 代码审查检查正则表达式：
```regex
# 检查硬编码数据
(const|let|var)\s+(PRIZES|PRODUCTS|CONFIG)\s*=\s*\[
(const|let|var)\s+\w+\s*=\s*\[.*probability.*\]

# 检查Mock标识
(mock|fake|test|demo)(Data|Request|Api|Function)
setTimeout\(\s*\(\)\s*=>\s*{.*callback.*mockData.*}

# 检查前端业务逻辑计算
Math\.random\(\)\s*\*\s*\d+
user\.(role|type)\s*===\s*['"]
```

### 7. ⚡ 强制执行机制

#### 发现违规代码时必须：
1. **立即停止所有开发工作**
2. **显示具体违规项和规则编号**
3. **提供正确的后端API调用示例**
4. **要求开发者确认后端服务状态**

#### 违规错误提示模板：
```
🚨 严重违规！违反天工项目核心安全规则

违规类型：[前端硬编码敏感数据/使用模拟数据]
违规位置：文件名:行号
违规内容：具体代码片段

必须修正为：
1. 移除所有硬编码数据
2. 改为真实后端API调用
3. 添加后端异常处理机制

在修正违规问题前，禁止继续开发！
```

### 8. 📝 合规代码模板与注释规范

#### 必须添加的安全注释：
```javascript
// 🔴 必须从后端获取，严禁前端硬编码
// 🚨 核心安全数据，不允许前端模拟
// ⚠️ 后端服务异常时的错误处理
// ✅ 正确的后端API调用方式
```

#### 统一测试数据管理：
```javascript
// ✅ 开发阶段：与后端API数据结构保持一致的测试数据
const initTestData = () => {
  // 结构一致，数据可以是测试数据，但不能替代真实API调用
  return mockDataStructure  
}
```

### 9. 🎯 开发流程安全规范

#### 新功能开发安全检查：
1. **设计阶段**：先确认后端API设计
2. **开发阶段**：前端调用真实API，不使用模拟数据
3. **测试阶段**：验证前后端数据一致性
4. **上线阶段**：确保所有数据来源于后端

#### 调试和测试安全要求：
- 🔧 使用后端开发环境进行联调
- 🔧 通过API文档验证数据格式
- 🔧 记录前后端数据交互日志
- ❌ 不使用前端模拟数据进行功能测试

### 10. 📊 项目合规性检查清单

#### 每次代码提交前必须确认：
- [ ] 无任何硬编码业务数据
- [ ] 无任何mock/模拟数据使用
- [ ] 所有数据来源于真实后端API
- [ ] 包含完整的后端异常处理
- [ ] 后端服务异常时显示明确错误提示
- [ ] 强制数据存在性检查已实施
- [ ] 测试数据与生产数据结构同步

## 🎯 规则优先级：最高 - 违反此规则立即停止开发

**⚠️ 违反以上任何一条规则，立即停止开发并修正！**

---
**创建时间**: 2025年1月2日  
**适用项目**: 天工前端项目（微信小程序）  
**维护责任**: 必须严格执行，不允许任何例外
**整合状态**: 已整合1.mdc中的数据安全相关规则
