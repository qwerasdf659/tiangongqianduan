---
description: 
globs: 
alwaysApply: true
---
# 🔧 开发自动化与环境统一规范 - 核心自动化规则集

## 🚨 核心目标：确保开发环境稳定性和规则自动化执行

### 第一部分：开发环境与工具规范

#### 1. 🛡️ PowerShell控制台稳定性保障

##### PSConsoleReadLine模块预检机制
```powershell
# 🔴 强制要求：生成PowerShell命令前自动检查模块完整性
Get-Module PSConsoleReadLine -ListAvailable

# 🔴 模块损坏时优先修复
if ($module.Version -ne $expectedVersion) {
    Update-Module PSConsoleReadLine -Force
}

# 🔴 强制配置：所有涉及中文字符的终端操作
[Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8  
[Console]::InputEncoding = [Text.UTF8Encoding]::UTF8
```

##### PowerShell语法严格规范（防止CMD语法错误）
```powershell
# ❌ 严禁：在PowerShell中使用CMD语法
dir /b *.backup 2>nul && echo "成功" || echo "失败"  # CMD语法，PowerShell不支持

# ✅ 正确：使用PowerShell原生语法
Get-ChildItem -Name "*.backup" -ErrorAction SilentlyContinue
if ($?) { Write-Host "成功" } else { Write-Host "失败" }

# ✅ 简化版本：直接使用PowerShell条件判断
$backupFiles = Get-ChildItem -Name "*.backup" -ErrorAction SilentlyContinue
if ($backupFiles) { "发现备份文件: $($backupFiles -join ', ')" } else { "无备份文件" }
```

##### 🚨 强制执行：run_terminal_cmd前语法检查
```javascript
// 🔴 每次调用run_terminal_cmd前必须执行此检查
const POWERSHELL_SYNTAX_VIOLATIONS = [
    { pattern: /&&/, name: '命令连接符&&', fix: '使用分号(;)' },
    { pattern: /\|\|/, name: '或操作符||', fix: '使用if (-not $?)' },
    { pattern: /^echo\s/, name: 'echo命令', fix: '使用Write-Host' },
    { pattern: /`[^`]*`/, name: '反引号', fix: '使用双引号' }
];

function validatePowerShellCommand(command) {
    for (const violation of POWERSHELL_SYNTAX_VIOLATIONS) {
        if (violation.pattern.test(command)) {
            throw new Error(`🚨 PowerShell语法违规: ${violation.name}\n命令: "${command}"\n解决方案: ${violation.fix}`);
        }
    }
    return true;
}

// 🔴 强制要求：所有run_terminal_cmd调用必须先验证
// validatePowerShellCommand(command) 必须在执行前调用
```

#### 2. 🔧 Git分页器卡死预防规则

##### 禁止使用会触发分页器的Git命令
```bash
# ❌ 绝对禁止：可能进入分页器模式，导致卡死超过120秒
git log
git branch -v
git diff
git show
git blame

# ✅ 正确：强制禁用分页器
git --no-pager log --oneline -10
git --no-pager branch -v
git --no-pager diff
git --no-pager show

# ✅ 正确：限制输出避免分页
git log --oneline -5
git branch -v | head -10
git diff --stat | head -20
```

##### 指令超时处理规则
```
🚨 120秒超时规则：
- 一旦指令运行超过120秒没出任何结果或没有正确退出
- 自动重新运行这个指令，再不行就换另一种解决方案
- 第一次重试：git --no-pager [原命令]
- 第二次重试：应用全局配置后重试
- 最后方案：使用简化的等效命令
```

#### 3. 🔍 文件搜索命令规范

##### 强制要求：项目文件统计前必须先了解目录结构
```powershell
# 🔴 第一步：总是先查看目录结构，深度思考理解项目文件组织
list_dir pages  # 或者 Get-ChildItem pages -Directory

# 🔴 第二步：根据结构选择正确命令
# 如果文件在子目录中，必须使用 -Recurse
Get-ChildItem pages -Recurse -Include "*.js" | Measure-Object | Select-Object -ExpandProperty Count
```

##### 微信小程序项目文件操作规范
```powershell
# ✅ 正确：小程序页面在子目录中，注意符合微信小程序开发标准
Get-ChildItem pages -Recurse -Include "*.js"
Get-ChildItem pages -Recurse -Include "*.wxml"
Get-ChildItem components -Recurse -Include "*.js"
Get-ChildItem utils -Recurse -Include "*.js"
```

#### 4. 🏗️ 微信小程序开发工具标准

##### 强制使用规范
- ✅ **只使用微信开发者工具进行语法检查**
- ✅ **只使用PowerShell原生命令进行文件操作**
- ❌ **严禁使用node、npm等Web工具**
- ❌ **严禁使用webpack/babel等构建工具**

### 第二部分：规则管理与自动化系统

#### 🔧 规则文件统一管理系统
```javascript
// 🔴 规则文件管理器
class CursorRulesManager {
    constructor() {
        this.ruleFiles = {
            'development-automation-unified.mdc': 'core_automation',
            'tiangong-security-standards.mdc': 'security_standards', 
            '1.mdc': 'problem_analysis',
            'advanced-optimization.mdc': 'optimization_rules',
            'problem-prevention-core.mdc': 'prevention_core'
        }
        
        this.ruleCategories = {
            'core_automation': ['PowerShell安全', 'Git操作', '微信小程序识别'],
            'security_standards': ['数据安全', 'API安全', 'Mock数据检测'],
            'problem_analysis': ['问题分级', '工具调用验证', '并行优化'],
            'optimization_rules': ['效率监控', '配置管理', '搜索优化'],
            'prevention_core': ['超时管理', '参数验证', '批量检测']
        }
    }
    
    // 🔴 检查规则重复
    async checkRuleDuplication() {
        const duplications = []
        
        // 并行读取所有规则文件
        const fileContents = await Promise.all(
            Object.keys(this.ruleFiles).map(async file => {
                const content = await read_file(`.cursor/rules/${file}`, true, 1, -1)
                return { file, content: content.content }
            })
        )
        
        // 检测重复内容
        for (let i = 0; i < fileContents.length; i++) {
            for (let j = i + 1; j < fileContents.length; j++) {
                const similarity = this.calculateSimilarity(
                    fileContents[i].content, 
                    fileContents[j].content
                )
                
                if (similarity > 0.3) { // 30%以上相似度
                    duplications.push({
                        file1: fileContents[i].file,
                        file2: fileContents[j].file,
                        similarity: Math.round(similarity * 100),
                        recommendation: 'merge_or_refactor'
                    })
                }
            }
        }
        
        return duplications
    }
    
    // 🔴 生成规则同步计划
    generateSyncPlan(duplications) {
        return {
            duplicationsFound: duplications.length,
            totalFiles: Object.keys(this.ruleFiles).length,
            recommendations: duplications.map(dup => ({
                action: 'MERGE_RULES',
                files: [dup.file1, dup.file2],
                similarity: dup.similarity,
                priority: dup.similarity > 50 ? 'HIGH' : 'MEDIUM'
            })),
            estimatedTimeSaving: duplications.length * 5000 // 5秒每个重复
        }
    }
}
```

#### 🎯 微信小程序项目自动识别系统
```javascript
// 🔴 微信小程序项目检测器
class WechatMiniProgramDetector {
    constructor() {
        this.requiredFiles = [
            'app.js', 'app.json', 'app.wxss', 'project.config.json', 
            'pages/', 'components/', 'utils/'
        ]
        
        this.prohibitedCommands = [
            'npm start', 'npm run dev', 'node server.js', 
            'webpack-dev-server', 'vite', 'yarn start'
        ]
    }
    
    // 🔴 项目类型检测
    detectProjectType(projectPath) {
        const detectedFiles = this.requiredFiles.filter(file => 
            fs.existsSync(path.join(projectPath, file))
        )
        
        const confidence = detectedFiles.length / this.requiredFiles.length
        
        return {
            isMiniProgram: confidence >= 0.7,
            confidence: Math.round(confidence * 100),
            detectedFiles,
            missingFiles: this.requiredFiles.filter(file => 
                !detectedFiles.includes(file)
            )
        }
    }
    
    // 🔴 禁用Web开发命令
    validateCommand(command) {
        const isProhibited = this.prohibitedCommands.some(prohibited => 
            command.includes(prohibited)
        )
        
        if (isProhibited) {
            throw new Error(`🚨 微信小程序项目禁止使用: ${command}`)
        }
        
        return true
    }
}
```

### 第三部分：环境配置与自动化脚本

#### 🔧 环境变量统一管理
```javascript
// 🔴 环境配置管理器
class EnvironmentManager {
    constructor() {
        this.configFiles = [
            'config/env.js',
            'project.config.json',
            'project.private.config.json'
        ]
        
        this.requiredEnvVars = [
            'API_BASE_URL',
            'WS_BASE_URL',
            'APPID'
        ]
    }
    
    // 🔴 配置文件同步检查
    async syncConfigFiles() {
        const configs = {}
        
        // 并行读取所有配置文件
        const configPromises = this.configFiles.map(async file => {
            try {
                const content = await read_file(file, true, 1, -1)
                return { file, content: content.content, exists: true }
            } catch (error) {
                return { file, content: null, exists: false, error: error.message }
            }
        })
        
        const configResults = await Promise.all(configPromises)
        
        // 检查配置一致性
        const inconsistencies = this.checkConfigConsistency(configResults)
        
        if (inconsistencies.length > 0) {
            return {
                hasIssues: true,
                inconsistencies,
                fixPlan: this.generateConfigFixPlan(inconsistencies)
            }
        }
        
        return { hasIssues: false, message: '配置文件同步正常' }
    }
    
    // 🔴 环境变量验证
    validateEnvironment() {
        const missingVars = this.requiredEnvVars.filter(varName => 
            !process.env[varName] && !this.getConfigValue(varName)
        )
        
        if (missingVars.length > 0) {
            throw new Error(`🚨 缺少必要环境变量: ${missingVars.join(', ')}`)
        }
        
        return true
    }
}
```

#### 🚀 自动化部署脚本
```javascript
// 🔴 部署自动化管理器
class DeploymentAutomator {
    constructor() {
        this.deploymentSteps = [
            'validate_environment',
            'check_dependencies',
            'run_tests',
            'build_project',
            'deploy_to_staging',
            'run_smoke_tests',
            'deploy_to_production'
        ]
    }
    
    // 🔴 自动化部署流程
    async autoDeployment() {
        console.log('🚀 开始自动化部署流程...')
        
        const results = []
        
        for (const step of this.deploymentSteps) {
            try {
                const result = await this.executeStep(step)
                results.push({ step, success: true, result })
                
                console.log(`✅ ${step} 完成`)
                
            } catch (error) {
                results.push({ step, success: false, error: error.message })
                
                console.error(`❌ ${step} 失败: ${error.message}`)
                
                // 关键步骤失败时停止部署
                if (this.isCriticalStep(step)) {
                    throw new Error(`部署失败在关键步骤: ${step}`)
                }
            }
        }
        
        return {
            deploymentComplete: true,
            totalSteps: this.deploymentSteps.length,
            successfulSteps: results.filter(r => r.success).length,
            failedSteps: results.filter(r => !r.success).length,
            results
        }
    }
    
    // 🔴 步骤执行器
    async executeStep(stepName) {
        switch (stepName) {
            case 'validate_environment':
                return await this.validateEnvironment()
                
            case 'check_dependencies':
                return await this.checkDependencies()
                
            case 'run_tests':
                return await this.runTests()
                
            case 'build_project':
                return await this.buildProject()
                
            case 'deploy_to_staging':
                return await this.deployToStaging()
                
            case 'run_smoke_tests':
                return await this.runSmokeTests()
                
            case 'deploy_to_production':
                return await this.deployToProduction()
                
            default:
                throw new Error(`未知部署步骤: ${stepName}`)
        }
    }
}
```

### 第四部分：质量保证与监控

#### 🔍 代码质量检查自动化
```javascript
// 🔴 代码质量检查器
class CodeQualityChecker {
    constructor() {
        this.qualityRules = {
            'no_hardcoded_values': {
                pattern: /const\s+\w+\s*=\s*['"][^'"]*['"]/g,
                severity: 'warning',
                message: '避免硬编码值，使用配置文件'
            },
            'proper_error_handling': {
                pattern: /catch\s*\(\s*\w+\s*\)\s*\{\s*\}/g,
                severity: 'error',
                message: '空的catch块，必须添加错误处理'
            },
            'console_log_cleanup': {
                pattern: /console\.log\(/g,
                severity: 'warning',
                message: '生产环境应移除console.log'
            }
        }
    }
    
    // 🔴 批量代码质量检查
    async runQualityCheck() {
        const files = await this.getProjectFiles()
        const issues = []
        
        // 并行检查所有文件
        const checkPromises = files.map(async file => {
            const content = await read_file(file, true, 1, -1)
            return this.checkFileQuality(file, content.content)
        })
        
        const fileResults = await Promise.all(checkPromises)
        
        return {
            totalFiles: files.length,
            totalIssues: fileResults.reduce((sum, result) => sum + result.issues.length, 0),
            results: fileResults,
            summary: this.generateQualitySummary(fileResults)
        }
    }
    
    // 🔴 文件质量检查
    checkFileQuality(fileName, content) {
        const issues = []
        
        Object.entries(this.qualityRules).forEach(([ruleName, rule]) => {
            const matches = content.match(rule.pattern)
            
            if (matches) {
                issues.push({
                    rule: ruleName,
                    severity: rule.severity,
                    message: rule.message,
                    occurrences: matches.length,
                    file: fileName
                })
            }
        })
        
        return { file: fileName, issues }
    }
}
```

#### 📊 性能监控自动化
```javascript
// 🔴 性能监控系统
class PerformanceMonitor {
    constructor() {
        this.metrics = {
            'page_load_time': { threshold: 3000, unit: 'ms' },
            'api_response_time': { threshold: 1000, unit: 'ms' },
            'memory_usage': { threshold: 50, unit: 'MB' },
            'cpu_usage': { threshold: 80, unit: '%' }
        }
    }
    
    // 🔴 性能指标收集
    async collectMetrics() {
        const metrics = {}
        
        // 并行收集所有性能指标
        const metricPromises = Object.keys(this.metrics).map(async metricName => {
            const value = await this.measureMetric(metricName)
            return { metricName, value }
        })
        
        const metricResults = await Promise.all(metricPromises)
        
        metricResults.forEach(({ metricName, value }) => {
            metrics[metricName] = {
                value,
                threshold: this.metrics[metricName].threshold,
                unit: this.metrics[metricName].unit,
                status: value <= this.metrics[metricName].threshold ? 'OK' : 'WARNING'
            }
        })
        
        return {
            timestamp: Date.now(),
            metrics,
            overallStatus: this.calculateOverallStatus(metrics)
        }
    }
    
    // 🔴 性能告警
    checkPerformanceAlerts(metrics) {
        const alerts = []
        
        Object.entries(metrics).forEach(([metricName, data]) => {
            if (data.status === 'WARNING') {
                alerts.push({
                    metric: metricName,
                    value: data.value,
                    threshold: data.threshold,
                    unit: data.unit,
                    severity: 'HIGH',
                    message: `${metricName}超过阈值: ${data.value}${data.unit} > ${data.threshold}${data.unit}`
                })
            }
        })
        
        return alerts
    }
}
```

---

**规则创建时间**: 2025年1月3日  
**最后更新时间**: 2025年1月3日  
**更新内容**: 完善开发自动化规则，补充环境管理和质量保证机制  
**适用范围**: 微信小程序开发项目的完整自动化流程  
**维护状态**: ✅ 已完善 - 所有自动化规则已补充完整



