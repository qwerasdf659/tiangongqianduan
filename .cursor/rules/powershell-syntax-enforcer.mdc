---
description:
globs:
alwaysApply: false
---
# 🚨 PowerShell语法强制检查器 - 核心执行规则

## 🔴 强制执行：run_terminal_cmd调用前必须验证

### 1. 禁止语法清单 - 立即拒绝执行
```bash
# ❌ 绝对禁止的bash语法模式
&&          # 命令连接符
||          # 或操作符  
echo "..."  # bash echo命令
`...`       # 反引号
$(...) 作为命令连接  # bash命令替换
2>&1        # bash重定向
>/dev/null  # bash null重定向
```

### 2. 强制转换规则 - 自动修正
```powershell
# ✅ PowerShell正确语法对照表
bash语法               PowerShell语法
echo "text"           Write-Host "text" 
cmd1 && cmd2          cmd1; cmd2
cmd1 || cmd2          cmd1; if (-not $?) { cmd2 }
`command`             "command"
$((expr))             $(expr)
cmd 2>&1              cmd 2>$null
cmd >/dev/null        cmd >$null
```

### 3. 执行前强制检查流程
```javascript
// 🔴 每次run_terminal_cmd调用前必须执行此检查
function validatePowerShellSyntax(command) {
    // Step 1: 检测bash语法违规
    const bashPatterns = [
        { regex: /&&/, violation: '命令连接符&&', correct: ';' },
        { regex: /\|\|/, violation: '或操作符||', correct: '; if (-not $?) {...}' },
        { regex: /^echo\s+/, violation: 'echo命令', correct: 'Write-Host ' },
        { regex: /`[^`]*`/, violation: '反引号', correct: '双引号' },
        { regex: /2>&1/, violation: 'bash重定向', correct: '2>$null' }
    ];
    
    // Step 2: 检查违规
    for (const pattern of bashPatterns) {
        if (pattern.regex.test(command)) {
            throw new Error(`🚨 PowerShell语法违规: ${pattern.violation}\n命令: "${command}"\n正确语法: ${pattern.correct}`);
        }
    }
    
    // Step 3: 通过检查
    console.log(`✅ PowerShell语法检查通过: "${command}"`);
    return true;
}

// 🔴 自动转换函数 - 紧急修复用
function autoFixPowerShellSyntax(command) {
    let fixed = command
        .replace(/&&/g, ';')
        .replace(/\|\|/g, '; if (-not $?) {')
        .replace(/^echo\s+/g, 'Write-Host ')
        .replace(/`([^`]*)`/g, '"$1"')
        .replace(/2>&1/g, '2>$null');
    
    if (fixed !== command) {
        console.warn(`⚠️ 自动修复PowerShell语法:\n原始: "${command}"\n修复: "${fixed}"`);
    }
    
    return fixed;
}
```

### 4. 环境检测与适配
```javascript
// 🔴 强制环境检测 - 确保使用正确语法
function detectShellEnvironment() {
    const indicators = {
        isWindows: process.platform === 'win32' || navigator.userAgent.includes('Windows'),
        isPowerShell: true, // 根据用户信息确定
        shellVersion: '5.1',
        supportedCommands: ['Write-Host', 'Get-ChildItem', 'ForEach-Object']
    };
    
    return indicators;
}

// 🔴 命令生成模板 - 环境适配
const PowerShellTemplates = {
    multipleOutput: (messages) => messages.map(msg => `Write-Host "${msg}"`).join('; '),
    fileList: (path) => `Get-ChildItem "${path}"`,
    conditionalExecution: (condition, ifTrue, ifFalse) => 
        `if (${condition}) { ${ifTrue} } else { ${ifFalse} }`,
    directoryCheck: (path) => `Test-Path "${path}"`,
    fileCount: (path, pattern) => `(Get-ChildItem "${path}" -Include "${pattern}").Count`
};
```

### 5. 实时监控与警告系统
```javascript
// 🔴 违规监控计数器
let syntaxViolationCount = 0;
let violationHistory = [];

function recordViolation(command, violationType) {
    syntaxViolationCount++;
    violationHistory.push({
        timestamp: new Date().toISOString(),
        command,
        violationType,
        count: syntaxViolationCount
    });
    
    if (syntaxViolationCount >= 3) {
        console.error(`🚨 严重警告: PowerShell语法违规已达${syntaxViolationCount}次！`);
        console.error('违规历史:', violationHistory);
    }
}

// 🔴 会话结束时的违规报告
function generateViolationReport() {
    if (syntaxViolationCount > 0) {
        return {
            totalViolations: syntaxViolationCount,
            mostCommonViolation: getMostCommonViolation(),
            recommendations: [
                '使用Write-Host代替echo',
                '使用分号(;)代替&&连接命令',
                '充分利用PowerShell原生命令'
            ]
        };
    }
    return { status: 'clean', violations: 0 };
}
```

## 🔴 强制执行检查清单

### 每次run_terminal_cmd前必须确认：
- [ ] ✅ 命令不包含 && 连接符
- [ ] ✅ 命令不使用 echo，改用 Write-Host
- [ ] ✅ 命令不包含反引号 `
- [ ] ✅ 命令使用PowerShell原生语法
- [ ] ✅ 命令已通过语法验证器检查

### 紧急修复时使用：
```powershell
# 🔴 多行输出的正确PowerShell语法
Write-Host "第一行信息"
Write-Host "第二行信息"  
Write-Host "第三行信息"

# 🔴 或使用分号连接（简短命令）
Write-Host "信息1"; Write-Host "信息2"; Write-Host "信息3"

# 🔴 或使用数组循环（多个相似输出）
@("信息1", "信息2", "信息3") | ForEach-Object { Write-Host $_ }
```

## 🚨 违规惩罚机制
- 第1次违规：警告并自动修复
- 第2次违规：强制暂停，手动确认
- 第3次违规：终止当前任务，要求重新规划

## ✅ 成功标准
- 连续20次run_terminal_cmd调用无语法违规
- 自动化语法检查100%通过率
- 用户零PowerShell语法错误反馈
