# 🔐 天工前端项目安全规则 - 严禁违反数据安全原则

## 🚨 核心禁令 - 违反则立即停止开发

### 1. 绝对禁止前端硬编码敏感业务数据
```javascript
// ❌ 严禁：前端硬编码奖品配置
const PRIZES = [
  { name: '奖品1', probability: 10 },
  { name: '奖品2', probability: 20 }
]

// ❌ 严禁：前端硬编码商品价格
const PRODUCTS = [
  { id: 1, name: '商品1', price: 100 }
]

// ❌ 严禁：前端计算业务逻辑
const probability = Math.random() * 100
const userPermission = user.role === 'admin'
```

### 2. 绝对禁止使用模拟数据替代后端API
```javascript
// ❌ 严禁：Mock数据函数
const mockRequest = () => { /* 假数据 */ }
const shouldUseMock = () => true
const smartApiCall = (real, mock) => mock

// ❌ 严禁：setTimeout模拟异步
setTimeout(() => {
  callback({ data: mockData })
}, 1000)

// ❌ 严禁：前端生成业务数据
const generateMockProducts = () => [...]
```

### 3. 强制后端依赖检查
```javascript
// ✅ 必须：真实API调用 + 错误处理
api.getData().then(result => {
  if (result.code === 0) {
    // 使用后端数据
  } else {
    throw new Error('⚠️ 后端服务异常：' + result.msg)
  }
}).catch(error => {
  wx.showModal({
    title: '🚨 后端服务问题',
    content: '无法获取数据！请检查后端API服务状态。'
  })
})
```

## 🔍 代码审查检查点

### 自动拒绝包含以下模式的代码：
1. **硬编码数据标识**：
   - 数组/对象字面量包含业务数据
   - `const PRIZES = [...]`
   - `const PRODUCTS = [...]`
   - `const CONFIG = { probability: ... }`

2. **Mock/模拟标识**：
   - `mock`、`fake`、`test`、`demo`关键词
   - `shouldUseMock`、`smartApiCall`函数
   - `setTimeout`模拟异步操作
   - `Math.random()`生成业务数据

3. **前端业务逻辑**：
   - 概率计算：`Math.random() * 100`
   - 权限判断：`user.role === 'admin'`
   - 价格计算：前端计算商品价格

## ⚡ 强制执行规则

### 发现违规代码时必须：
1. **立即停止所有开发工作**
2. **显示具体违规项和规则编号**
3. **提供正确的后端API调用示例**
4. **要求开发者确认后端服务状态**

### 错误提示模板：
```
🚨 严重违规！违反天工项目核心安全规则

违规类型：[前端硬编码敏感数据/使用模拟数据]
违规位置：文件名:行号
违规内容：具体代码片段

必须修正为：
1. 移除所有硬编码数据
2. 改为真实后端API调用
3. 添加后端异常处理机制

在修正违规问题前，禁止继续开发！
```

## 📝 合规代码模板

### 抽奖系统正确写法：
```javascript
// ✅ 正确：从后端获取配置
lotteryAPI.getConfig().then(result => {
  if (result.code === 0) {
    this.setData({ 
      prizes: result.data.prizes,
      costPoints: result.data.cost_points 
    })
  } else {
    throw new Error('获取抽奖配置失败')
  }
}).catch(error => {
  wx.showModal({
    title: '⚠️ 后端服务异常', 
    content: '无法获取抽奖配置！请检查后端API服务。'
  })
})
```

### 商品管理正确写法：
```javascript
// ✅ 正确：后端数据源
exchangeAPI.getProducts().then(result => {
  if (result.code === 0) {
    this.setData({ products: result.data.products })
  } else {
    throw new Error('获取商品列表失败')
  }
})
```

## 🎯 目标确认

每次代码提交前必须确认：
- [ ] 无任何硬编码业务数据
- [ ] 无任何mock/模拟数据使用
- [ ] 所有数据来源于真实后端API
- [ ] 包含完整的后端异常处理
- [ ] 后端服务异常时显示明确错误提示

**违反以上任何一条规则，立即停止开发并修正！** 